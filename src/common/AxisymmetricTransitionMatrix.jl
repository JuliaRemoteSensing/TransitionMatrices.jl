struct AxisymmetricTransitionMatrix{CT, N, V <: AbstractVector{<:AbstractMatrix{CT}}, T} <:
       AbstractTransitionMatrix{CT, N}
    ùêì::V
end

Base.@propagate_inbounds function Base.getindex(axi::AxisymmetricTransitionMatrix{CT, N, V},
                                                m::Integer, n::Integer, m‚Ä≤::Integer,
                                                n‚Ä≤::Integer, p::Integer,
                                                p‚Ä≤::Integer) where {CT, N, V}
    if m != m‚Ä≤ || abs(m) > min(n, n‚Ä≤)
        zero(CT)
    else
        m‚Çê = abs(m)
        sig = m >= 0 ? 1 : (-1)^(p + p‚Ä≤)
        nn = N - max(1, m‚Çê) + 1
        n‚ÇÅ = (p - 1) * nn + n - max(1, m‚Çê) + 1
        n‚ÇÇ = (p‚Ä≤ - 1) * nn + n‚Ä≤ - max(1, m‚Çê) + 1
        axi.ùêì[m‚Çê + 1][n‚ÇÅ, n‚ÇÇ] * sig
    end
end
