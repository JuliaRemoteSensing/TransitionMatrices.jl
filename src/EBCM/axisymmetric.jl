@doc raw"""
```
amplitude_matrix(axi::AxisymmetricTransitionMatrix{CT, N, V, T}, œë·µ¢, œÜ·µ¢, œë‚Çõ, œÜ‚Çõ;
                          Œª = 2œÄ,
                          rot::Union{Nothing, Rotation{3}} = nothing) where {CT, N, V, T}
```

Calculate the amplitude matrix of an axisymmetric scatterer.

Parameters:

- `axi`: the T-Matrix of the scatterer.
- `œë·µ¢`: the zenith angle of the incident wave.
- `œÜ·µ¢`: the azimuth angle of the incident wave.
- `œë‚Çõ`: the zenith angle of the scattered wave.
- `œÜ‚Çõ`: the azimuth angle of the scattered wave.
- `Œª`: the wavelength of the incident wave in the host medium. Default to 2œÄ.
- `rot`: the rotation of the scatterer.

"""
function amplitude_matrix(axi::AxisymmetricTransitionMatrix{CT, N, V, T}, œë·µ¢, œÜ·µ¢, œë‚Çõ, œÜ‚Çõ;
                          Œª = 2œÄ,
                          rot::Union{Nothing, Rotation{3}} = nothing) where {CT, N, V, T}
    k‚ÇÅ = 2œÄ / Œª
    if isnothing(rot)
        Œ±, Œ≤ = zero(T), zero(T)
    else
        zyz = RotZYZ(rot)

        # gamma is useless for axisymmetric shapes
        Œ±, Œ≤ = T(zyz.theta1), T(zyz.theta2)
    end

    œë·µ¢ = T(œë·µ¢)
    œÜ·µ¢ = T(œÜ·µ¢)
    œë‚Çõ = T(œë‚Çõ)
    œÜ‚Çõ = T(œÜ‚Çõ)

    cosŒ± = cos(Œ±)
    sinŒ± = sin(Œ±)
    cosŒ≤ = cos(Œ≤)
    sinŒ≤ = sin(Œ≤)
    cosœë·µ¢ = cos(œë·µ¢)
    sinœë·µ¢ = sin(œë·µ¢)
    cosœÜ = cos(œÜ·µ¢ - Œ±)
    sinœÜ = sin(œÜ·µ¢ - Œ±)
    cosœë‚ÇÅ = cosœë·µ¢ * cosŒ≤ + sinœë·µ¢ * sinŒ≤ * cosœÜ
    œë‚ÇÅ = acos(cosœë‚ÇÅ)
    cosœÜ‚ÇÅ = sinœë·µ¢ * cosŒ≤ * cosœÜ - cosœë·µ¢ * sinŒ≤
    sinœÜ‚ÇÅ = sinœë·µ¢ * sinœÜ
    œÜ‚ÇÅ = atan(sinœÜ‚ÇÅ, cosœÜ‚ÇÅ)

    cosœë‚Çõ = cos(œë‚Çõ)
    sinœë‚Çõ = sin(œë‚Çõ)
    cosœÜ = cos(œÜ‚Çõ - Œ±)
    sinœÜ = sin(œÜ‚Çõ - Œ±)
    cosœë‚ÇÇ = cosœë‚Çõ * cosŒ≤ + sinœë‚Çõ * sinŒ≤ * cosœÜ
    œë‚ÇÇ = acos(cosœë‚ÇÇ)
    cosœÜ‚ÇÇ = sinœë‚Çõ * cosŒ≤ * cosœÜ - cosœë‚Çõ * sinŒ≤
    sinœÜ‚ÇÇ = sinœë‚Çõ * sinœÜ
    œÜ‚ÇÇ = atan(sinœÜ‚ÇÇ, cosœÜ‚ÇÇ)

    ùêÅ = @SMatrix [cosŒ±*cosŒ≤ sinŒ±*cosŒ≤ -sinŒ≤
                  -sinŒ± cosŒ± 0
                  cosŒ±*sinŒ≤ sinŒ±*sinŒ≤ cosŒ≤]

    cosœÜ·µ¢ = cos(œÜ·µ¢)
    sinœÜ·µ¢ = sin(œÜ·µ¢)
    cosœÜ‚Çõ = cos(œÜ‚Çõ)
    sinœÜ‚Çõ = sin(œÜ‚Çõ)

    ùêã·µ¢ = @SMatrix [cosœë·µ¢*cosœÜ·µ¢ -sinœÜ·µ¢
                   cosœë·µ¢*sinœÜ·µ¢ cosœÜ·µ¢
                   -sinœë·µ¢ 0]
    ùêã‚Çõ = @SMatrix [cosœë‚Çõ*cosœÜ‚Çõ -sinœÜ‚Çõ
                   cosœë‚Çõ*sinœÜ‚Çõ cosœÜ‚Çõ
                   -sinœë‚Çõ 0]

    sinœë‚ÇÅ = sin(œë‚ÇÅ)
    cosœÜ‚ÇÅ = cos(œÜ‚ÇÅ)
    sinœÜ‚ÇÅ = sin(œÜ‚ÇÅ)
    sinœë‚ÇÇ = sin(œë‚ÇÇ)
    cosœÜ‚ÇÇ = cos(œÜ‚ÇÇ)
    sinœÜ‚ÇÇ = sin(œÜ‚ÇÇ)

    ùêè‚ÇÅ = @SMatrix [cosœë‚ÇÅ*cosœÜ‚ÇÅ cosœë‚ÇÅ*sinœÜ‚ÇÅ -sinœë‚ÇÅ
                   -sinœÜ‚ÇÅ cosœÜ‚ÇÅ 0]
    ùêè‚ÇÇ = @SMatrix [cosœë‚ÇÇ*cosœÜ‚ÇÇ cosœë‚ÇÇ*sinœÜ‚ÇÇ -sinœë‚ÇÇ
                   -sinœÜ‚ÇÇ cosœÜ‚ÇÇ 0]

    ùêë‚ÇÅ = ùêè‚ÇÅ * (ùêÅ * ùêã·µ¢)
    ùêë‚ÇÇ = inv(ùêè‚ÇÇ * (ùêÅ * ùêã‚Çõ))

    S‚ÇÅ‚ÇÅ, S‚ÇÅ‚ÇÇ, S‚ÇÇ‚ÇÅ, S‚ÇÇ‚ÇÇ = zero(CT), zero(CT), zero(CT), zero(CT)
    œÜ = œÜ‚ÇÇ - œÜ‚ÇÅ

    coeff = ([1.0im^((n‚Ä≤ - n - 1) & 3) *
              ‚àöT((2n + 1) * (2n‚Ä≤ + 1) / (n * (n + 1) * n‚Ä≤ * (n‚Ä≤ + 1)))
              for n in 1:N, n‚Ä≤ in 1:N])

    for m in 0:N
        œÄ‚ÇÅ, œÑ‚ÇÅ = wigner_d_recursion(T, 0, m, N, œë‚ÇÅ, deriv = true)
        œÄ‚ÇÇ, œÑ‚ÇÇ = wigner_d_recursion(T, 0, m, N, œë‚ÇÇ, deriv = true)

        for n in m:N
            œÄ‚ÇÅ[n] = pi_func(T, m, n, œë‚ÇÅ; d = œÄ‚ÇÅ[n])
            œÄ‚ÇÇ[n] = pi_func(T, m, n, œë‚ÇÇ; d = œÄ‚ÇÇ[n])
        end

        n‚Çò = N - max(1, m) + 1
        offset = N - n‚Çò
        cosmœÜ = cos(m * œÜ)
        sinmœÜ = sin(m * œÜ)

        for n‚Ä≤ in 1:n‚Çò, n in 1:n‚Çò
            T‚ÇÅ‚ÇÅ = axi.ùêì[m + 1][n, n‚Ä≤]
            T‚ÇÇ‚ÇÇ = axi.ùêì[m + 1][n + n‚Çò, n‚Ä≤ + n‚Çò]
            if m == 0
                S‚ÇÅ‚ÇÅ += coeff[n + offset, n‚Ä≤ + offset] * œÑ‚ÇÇ[n + offset] * œÑ‚ÇÅ[n‚Ä≤ + offset] *
                       T‚ÇÇ‚ÇÇ
                S‚ÇÇ‚ÇÇ += coeff[n + offset, n‚Ä≤ + offset] * œÑ‚ÇÇ[n + offset] * œÑ‚ÇÅ[n‚Ä≤ + offset] *
                       T‚ÇÅ‚ÇÅ
            else
                T‚ÇÅ‚ÇÇ = axi.ùêì[m + 1][n, n‚Ä≤ + n‚Çò]
                T‚ÇÇ‚ÇÅ = axi.ùêì[m + 1][n + n‚Çò, n‚Ä≤]
                c‚ÇÅ = coeff[n + offset, n‚Ä≤ + offset] * 2cosmœÜ
                c‚ÇÇ = coeff[n + offset, n‚Ä≤ + offset] * 2sinmœÜ

                D‚ÇÅ‚ÇÅ = œÄ‚ÇÇ[n + offset] * œÄ‚ÇÅ[n‚Ä≤ + offset]
                D‚ÇÅ‚ÇÇ = œÄ‚ÇÇ[n + offset] * œÑ‚ÇÅ[n‚Ä≤ + offset]
                D‚ÇÇ‚ÇÅ = œÑ‚ÇÇ[n + offset] * œÄ‚ÇÅ[n‚Ä≤ + offset]
                D‚ÇÇ‚ÇÇ = œÑ‚ÇÇ[n + offset] * œÑ‚ÇÅ[n‚Ä≤ + offset]
                S‚ÇÅ‚ÇÅ += c‚ÇÅ * (T‚ÇÅ‚ÇÅ * D‚ÇÅ‚ÇÅ + T‚ÇÅ‚ÇÇ * D‚ÇÅ‚ÇÇ + T‚ÇÇ‚ÇÅ * D‚ÇÇ‚ÇÅ + T‚ÇÇ‚ÇÇ * D‚ÇÇ‚ÇÇ)
                S‚ÇÅ‚ÇÇ += c‚ÇÇ * (T‚ÇÅ‚ÇÅ * D‚ÇÅ‚ÇÇ + T‚ÇÅ‚ÇÇ * D‚ÇÅ‚ÇÅ + T‚ÇÇ‚ÇÅ * D‚ÇÇ‚ÇÇ + T‚ÇÇ‚ÇÇ * D‚ÇÇ‚ÇÅ)
                S‚ÇÇ‚ÇÅ -= c‚ÇÇ * (T‚ÇÅ‚ÇÅ * D‚ÇÇ‚ÇÅ + T‚ÇÅ‚ÇÇ * D‚ÇÇ‚ÇÇ + T‚ÇÇ‚ÇÅ * D‚ÇÅ‚ÇÅ + T‚ÇÇ‚ÇÇ * D‚ÇÅ‚ÇÇ)
                S‚ÇÇ‚ÇÇ += c‚ÇÅ * (T‚ÇÅ‚ÇÅ * D‚ÇÇ‚ÇÇ + T‚ÇÅ‚ÇÇ * D‚ÇÇ‚ÇÅ + T‚ÇÇ‚ÇÅ * D‚ÇÅ‚ÇÇ + T‚ÇÇ‚ÇÇ * D‚ÇÅ‚ÇÅ)
            end
        end
    end

    ùêí = @SMatrix [S‚ÇÅ‚ÇÅ S‚ÇÅ‚ÇÇ
                  S‚ÇÇ‚ÇÅ S‚ÇÇ‚ÇÇ]

    return ùêë‚ÇÇ * (ùêí * ùêë‚ÇÅ) / k‚ÇÅ
end

@testitem "ùêí(axi, euler) ‚â° ùêí(rotate(axi, euler))" begin
    using Rotations: RotZYZ
    using TransitionMatrices: Spheroid, amplitude_matrix, rotate, transition_matrix

    @testset "Spheroid" begin
        params = Iterators.product((0.5, 1.0, 5.0), (1.0,), (1.311, 1.5 + 0.01im),
                                   (0.0, 0.5), (0.0, 0.5))

        @testset "a = $a, c = $c, m = $m, Œ± = $Œ±, Œ≤ = $Œ≤" for (a, c, m, Œ±, Œ≤) in params
            s = Spheroid{Float64, ComplexF64}(a, c, m)
            ùêì = transition_matrix(s, 2œÄ, 15, 200)
            ùêìr = rotate(ùêì, RotZYZ(Œ±, Œ≤, 0))

            ùêí = amplitude_matrix(ùêì, 0.0, 0.3, œÄ / 2, 0.5; rot = RotZYZ(Œ±, Œ≤, 0))
            ùêír = amplitude_matrix(ùêìr, 0.0, 0.3, œÄ / 2, 0.5)

            @test all(ùêí .‚âà ùêír)
        end
    end
end

@doc raw"""
```
transition_matrix(s::AbstractAxisymmetricShape{T, CT}, Œª, n‚Çò‚Çê‚Çì, Ng) where {T, CT}
```

Calculate the T-Matrix for a given scatterer and wavelength, using the given maximum order `n‚Çò‚Çê‚Çì` and number of Gauss-Legendre quadrature points `Ng`.

Parameters:

- `s`: the axisymmetricsScatterer.
- `Œª`: the wavelength.
- `n‚Çò‚Çê‚Çì`: the maximum order of the T-Matrix.
- `Ng`: the number of Gauss-Legendre quadrature points to be used.

Returns:

- `ùêì`: an `AxisymmetricTransitionMatrix` struct representing the T-Matrix.
"""
function transition_matrix(s::AbstractAxisymmetricShape{T, CT}, Œª, n‚Çò‚Çê‚Çì, Ng;
                           zerofn = () -> zero(CT)) where {T, CT}
    ùêì = Vector{Matrix{CT}}(undef, n‚Çò‚Çê‚Çì + 1)
    ùêì[1], cache = transition_matrix_m‚ÇÄ(s, Œª, n‚Çò‚Çê‚Çì, Ng; zerofn = zerofn, reuse = true)
    for m in 1:n‚Çò‚Çê‚Çì
        ùêì[m + 1] = transition_matrix_m(m, s, Œª, n‚Çò‚Çê‚Çì, Ng; zerofn = zerofn, cache = cache)
    end

    AxisymmetricTransitionMatrix{CT, n‚Çò‚Çê‚Çì, typeof(ùêì), T}(ùêì)
end

function ùêì_from_ùêè_and_ùêî(ùêè, ùêî)
    ùêê = @. ùêè + 1im * ùêî
    ùêì = -ùêè * inv(ùêê)
end

## Hand-written version autodiff, slower than ForwardDiff.jl
# function ùêì_from_ùêè_and_ùêî(ùêè::Matrix{Complex{ForwardDiff.Dual{ForwardDiff.Tag{F, T}, T, N}}},
#                         ùêî) where {F, T, N}
#     ùêê = @. ùêè + 1im * ùêî
#     ùêêr = real.(ùêê)
#     ùêêi = imag.(ùêê)
#     Qv = @. complex(ForwardDiff.value(ùêêr), ForwardDiff.value(ùêêi))
#     Qv‚Åª¬π = inv(Qv)
#     ùêèr = real.(ùêè)
#     ùêèi = imag.(ùêè)
#     Pv = @. complex(ForwardDiff.value(ùêèr), ForwardDiff.value(ùêèi))
#     Tv = -Pv * Qv‚Åª¬π
#     ‚àÇPr = ForwardDiff.partials.(ùêèr)
#     ‚àÇPi = ForwardDiff.partials.(ùêèi)
#     ‚àÇQr = ForwardDiff.partials.(ùêêr)
#     ‚àÇQi = ForwardDiff.partials.(ùêêi)

#     ‚àÇP = [map(zip(‚àÇPr, ‚àÇPi)) do (r, i)
#               complex(r[j], i[j])
#           end
#           for j in 1:N]
#     ‚àÇQ = [map(zip(‚àÇQr, ‚àÇQi)) do (r, i)
#               complex(r[j], i[j])
#           end
#           for j in 1:N]

#     ‚àÇT = map(zip(‚àÇP, ‚àÇQ)) do (‚àÇPj, ‚àÇQj)
#         -(‚àÇPj + Tv * ‚àÇQj) * Qv‚Åª¬π
#     end

#     DT = eltype(ùêêr)
#     ùêì = similar(ùêê)
#     map!(ùêì, CartesianIndices(Tv)) do ij
#         complex(DT(real(Tv[ij]),
#                    ForwardDiff.Partials(tuple([real(‚àÇT[i][ij]) for i in 1:N]...))),
#                 DT(imag(Tv[ij]),
#                    ForwardDiff.Partials(tuple([imag(‚àÇT[i][ij]) for i in 1:N]...))))
#     end
# end

"""
```
transition_matrix_m‚ÇÄ(s::AbstractAxisymmetricShape{T, CT}, Œª, n‚Çò‚Çê‚Çì, Ng) where {T, CT}
```

Calculate the `m=0` block of the T-Matrix for a given axisymmetric scatterer.
"""
function transition_matrix_m‚ÇÄ(s::AbstractAxisymmetricShape{T, CT}, Œª, n‚Çò‚Çê‚Çì,
                              Ng; zerofn = () -> zero(CT), reuse = false) where {T, CT}
    @assert iseven(Ng) "Ng must be even!"

    k = 2 * T(œÄ) / Œª
    sym = has_symmetric_plane(s)
    ng = sym ? Ng √∑ 2 : Ng

    x, w, r, r‚Ä≤ = gaussquad(s, Ng)
    œë = acos.(x)

    a = [n * (n + 1) for n in 1:n‚Çò‚Çê‚Çì]
    A = [‚àö(T(2n + 1) / (2n * (n + 1))) for n in 1:n‚Çò‚Çê‚Çì]
    r‚Çò‚Çê‚Çì = maximum(r)
    n‚Çë‚Çì‚Çú·µ£‚Çê = estimate_ricattibesselj_extra_terms(n‚Çò‚Çê‚Çì, k * r‚Çò‚Çê‚Çì)
    œà = zeros(T, ng, n‚Çò‚Çê‚Çì)
    z = zeros(T, n‚Çò‚Çê‚Çì + n‚Çë‚Çì‚Çú·µ£‚Çê, ng)
    œà‚Ä≤ = similar(œà)
    œá = similar(œà)
    œá‚Ä≤ = similar(œà)

    Threads.@threads for i in 1:ng
        kr = k * r[i]
        ricattibesselj!(view(œà, i, :), view(œà‚Ä≤, i, :), view(z, :, i), n‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çú·µ£‚Çê, kr)
        ricattibessely!(view(œá, i, :), view(œá‚Ä≤, i, :), n‚Çò‚Çê‚Çì, kr)
    end

    n‚Çë‚Çì‚Çú·µ£‚Çê = estimate_ricattibesselj_extra_terms(n‚Çò‚Çê‚Çì, s.m * k * r‚Çò‚Çê‚Çì)
    œà‚Çõ = zeros(CT, ng, n‚Çò‚Çê‚Çì)
    z‚Çõ = zeros(CT, n‚Çò‚Çê‚Çì + n‚Çë‚Çì‚Çú·µ£‚Çê, ng)
    œà‚Çõ‚Ä≤ = similar(œà‚Çõ)
    œá‚Çõ = similar(œà‚Çõ)
    œá‚Çõ‚Ä≤ = similar(œà‚Çõ)

    Threads.@threads for i in 1:ng
        k‚Çõr = k * s.m * r[i]
        ricattibesselj!(view(œà‚Çõ, i, :), view(œà‚Çõ‚Ä≤, i, :), view(z‚Çõ, :, i), n‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çú·µ£‚Çê,
                        k‚Çõr)
        ricattibessely!(view(œá‚Çõ, i, :), view(œá‚Çõ‚Ä≤, i, :), n‚Çò‚Çê‚Çì, k‚Çõr)
    end

    d = OffsetArray(zeros(T, Ng, n‚Çò‚Çê‚Çì + 1), 1:Ng, 0:n‚Çò‚Çê‚Çì)
    ùúã = similar(d)
    œÑ = similar(d)

    Threads.@threads for i in eachindex(œë)
        wigner_d_recursion!(view(d, i, :), 0, 0, n‚Çò‚Çê‚Çì, œë[i];
                            deriv = view(œÑ, i, :))

        for n in 0:n‚Çò‚Çê‚Çì
            ùúã[i, n] = pi_func(T, 0, n, œë[i]; d = d[i, n])
        end
    end

    ùêè = zeros(CT, 2n‚Çò‚Çê‚Çì, 2n‚Çò‚Çê‚Çì)
    ùêè‚ÇÅ‚ÇÅ = view(ùêè, 1:n‚Çò‚Çê‚Çì, 1:n‚Çò‚Çê‚Çì)
    ùêè‚ÇÇ‚ÇÇ = view(ùêè, (n‚Çò‚Çê‚Çì + 1):(2n‚Çò‚Çê‚Çì), (n‚Çò‚Çê‚Çì + 1):(2n‚Çò‚Çê‚Çì))
    ùêî = zeros(CT, 2n‚Çò‚Çê‚Çì, 2n‚Çò‚Çê‚Çì)
    ùêî‚ÇÅ‚ÇÅ = view(ùêî, 1:n‚Çò‚Çê‚Çì, 1:n‚Çò‚Çê‚Çì)
    ùêî‚ÇÇ‚ÇÇ = view(ùêî, (n‚Çò‚Çê‚Çì + 1):(2n‚Çò‚Çê‚Çì), (n‚Çò‚Çê‚Çì + 1):(2n‚Çò‚Çê‚Çì))

    Threads.@threads for (n, n‚Ä≤) in collect(Iterators.product(1:n‚Çò‚Çê‚Çì, 1:n‚Çò‚Çê‚Çì))
        if sym && isodd(n + n‚Ä≤)
            continue
        end

        if n != n‚Ä≤
            PL‚ÇÅ = zerofn()
            PL‚ÇÇ = zerofn()
            PL‚Çá = zerofn()
            PL‚Çà = zerofn()

            UL‚ÇÅ = zerofn()
            UL‚ÇÇ = zerofn()
            UL‚Çá = zerofn()
            UL‚Çà = zerofn()

            for i in 1:ng
                PL‚ÇÅ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] * œà[i, n] * œà‚Çõ[i, n‚Ä≤]
                PL‚ÇÇ += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] * œà[i, n] * œà‚Çõ[i, n‚Ä≤]
                PL‚Çá += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] *
                       (œà‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                        a[n] * œà[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))
                PL‚Çà += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] *
                       (œà‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                        a[n‚Ä≤] * œà[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))

                UL‚ÇÅ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] * œá[i, n] * œà‚Çõ[i, n‚Ä≤]
                UL‚ÇÇ += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] * œá[i, n] * œà‚Çõ[i, n‚Ä≤]
                UL‚Çá += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] *
                       (œá‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                        a[n] * œá[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))
                UL‚Çà += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] *
                       (œá‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                        a[n‚Ä≤] * œá[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))
            end

            ùêè‚ÇÅ‚ÇÅ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                         (a[n] * PL‚ÇÇ - a[n‚Ä≤] * PL‚ÇÅ)
            ùêè‚ÇÇ‚ÇÇ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                         (a[n] * PL‚Çà - a[n‚Ä≤] * PL‚Çá)
            ùêî‚ÇÅ‚ÇÅ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                         (a[n] * UL‚ÇÇ - a[n‚Ä≤] * UL‚ÇÅ)
            ùêî‚ÇÇ‚ÇÇ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                         (a[n] * UL‚Çà - a[n‚Ä≤] * UL‚Çá)
        else
            PLÃÉ‚ÇÅ = zerofn()
            PLÃÉ‚ÇÇ = zerofn()
            PLÃÉ‚ÇÉ = zerofn()

            ULÃÉ‚ÇÅ = zerofn()
            ULÃÉ‚ÇÇ = zerofn()
            ULÃÉ‚ÇÉ = zerofn()

            for i in 1:ng
                PLÃÉ‚ÇÅ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                        (œà‚Ä≤[i, n] * œà‚Çõ[i, n] - s.m * œà[i, n] * œà‚Çõ‚Ä≤[i, n])
                PLÃÉ‚ÇÇ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                        (s.m * œà‚Ä≤[i, n] * œà‚Çõ[i, n] - œà[i, n] * œà‚Çõ‚Ä≤[i, n])
                PLÃÉ‚ÇÉ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n] * œà[i, n] * œà‚Çõ[i, n] /
                        (s.m * (k * r[i])^2)

                ULÃÉ‚ÇÅ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                        (œá‚Ä≤[i, n] * œà‚Çõ[i, n] - s.m * œá[i, n] * œà‚Çõ‚Ä≤[i, n])
                ULÃÉ‚ÇÇ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                        (s.m * œá‚Ä≤[i, n] * œà‚Çõ[i, n] - œá[i, n] * œà‚Çõ‚Ä≤[i, n])
                ULÃÉ‚ÇÉ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n] * œá[i, n] * œà‚Çõ[i, n] /
                        (s.m * (k * r[i])^2)
            end

            ùêè‚ÇÅ‚ÇÅ[n, n] = -1im / s.m * A[n]^2 * PLÃÉ‚ÇÅ
            ùêè‚ÇÇ‚ÇÇ[n, n] = -1im / s.m * A[n]^2 * (PLÃÉ‚ÇÇ + (s.m^2 - 1) * a[n] * PLÃÉ‚ÇÉ)

            ùêî‚ÇÅ‚ÇÅ[n, n] = -1im / s.m * A[n]^2 * ULÃÉ‚ÇÅ
            ùêî‚ÇÇ‚ÇÇ[n, n] = -1im / s.m * A[n]^2 * (ULÃÉ‚ÇÇ + (s.m^2 - 1) * a[n] * ULÃÉ‚ÇÉ)
        end
    end

    ùêì = ùêì_from_ùêè_and_ùêî(ùêè, ùêî)

    if reuse
        cache = x, w, r, r‚Ä≤, œë, a, A, œà, œà‚Ä≤, œá, œá‚Ä≤, œà‚Çõ, œà‚Çõ‚Ä≤, œá‚Çõ, œá‚Çõ‚Ä≤
        return ùêì, cache
    end

    return ùêì
end

"""
```
transition_matrix_m(m, s::AbstractAxisymmetricShape{T, CT}, Œª, n‚Çò‚Çê‚Çì, Ng) where {T, CT}
```

Calculate the `m`-th block of the T-Matrix for a given axisymmetric scatterer.
"""
function transition_matrix_m(m, s::AbstractAxisymmetricShape{T, CT}, Œª, n‚Çò‚Çê‚Çì,
                             Ng; zerofn = () -> zero(CT), cache = nothing) where {T, CT}
    @assert iseven(Ng) "Ng must be even!"

    k = 2 * T(œÄ) / Œª
    n‚Çò·µ¢‚Çô = max(1, m)
    nn = n‚Çò‚Çê‚Çì - n‚Çò·µ¢‚Çô + 1
    sym = has_symmetric_plane(s)
    ng = sym ? Ng √∑ 2 : Ng

    if !isnothing(cache)
        x, w, r, r‚Ä≤, œë, a, A, œà, œà‚Ä≤, œá, œá‚Ä≤, œà‚Çõ, œà‚Çõ‚Ä≤, œá‚Çõ, œá‚Çõ‚Ä≤ = cache
    else
        x, w, r, r‚Ä≤ = gaussquad(s, Ng)
        œë = acos.(x)
        a = OffsetArray([T(n * (n + 1)) for n in n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì], n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)
        A = OffsetArray([‚àö(T(2n + 1) / (2n * (n + 1))) for n in n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì], n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)

        r‚Çò‚Çê‚Çì = maximum(r)
        n‚Çë‚Çì‚Çú·µ£‚Çê = estimate_ricattibesselj_extra_terms(n‚Çò‚Çê‚Çì, k * r‚Çò‚Çê‚Çì)
        œà = zeros(T, ng, n‚Çò‚Çê‚Çì)
        z = zeros(T, n‚Çò‚Çê‚Çì + n‚Çë‚Çì‚Çú·µ£‚Çê, ng)
        œà‚Ä≤ = similar(œà)
        œá = similar(œà)
        œá‚Ä≤ = similar(œà)

        Threads.@threads for i in 1:ng
            kr = k * r[i]
            ricattibesselj!(view(œà, i, :), view(œà‚Ä≤, i, :), view(z, :, i), n‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çú·µ£‚Çê, kr)
            ricattibessely!(view(œá, i, :), view(œá‚Ä≤, i, :), n‚Çò‚Çê‚Çì, kr)
        end

        n‚Çë‚Çì‚Çú·µ£‚Çê = estimate_ricattibesselj_extra_terms(n‚Çò‚Çê‚Çì, s.m * k * r‚Çò‚Çê‚Çì)
        œà‚Çõ = zeros(CT, ng, n‚Çò‚Çê‚Çì)
        z‚Çõ = zeros(CT, n‚Çò‚Çê‚Çì + n‚Çë‚Çì‚Çú·µ£‚Çê, ng)
        œà‚Çõ‚Ä≤ = similar(œà‚Çõ)
        œá‚Çõ = similar(œà‚Çõ)
        œá‚Çõ‚Ä≤ = similar(œà‚Çõ)

        Threads.@threads for i in 1:ng
            k‚Çõr = k * s.m * r[i]
            ricattibesselj!(view(œà‚Çõ, i, :), view(œà‚Çõ‚Ä≤, i, :), view(z‚Çõ, :, i), n‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çú·µ£‚Çê,
                            k‚Çõr)
            ricattibessely!(view(œá‚Çõ, i, :), view(œá‚Çõ‚Ä≤, i, :), n‚Çò‚Çê‚Çì, k‚Çõr)
        end
    end

    d = OffsetArray(zeros(T, Ng, n‚Çò‚Çê‚Çì - m + 1), 1:Ng, m:n‚Çò‚Çê‚Çì)
    ùúã = similar(d)
    œÑ = similar(d)

    Threads.@threads for i in eachindex(œë)
        wigner_d_recursion!(view(d, i, :), 0, m, n‚Çò‚Çê‚Çì, œë[i];
                            deriv = view(œÑ, i, :))

        for n in n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì
            ùúã[i, n] = pi_func(T, m, n, œë[i]; d = d[i, n])
        end
    end

    ùêè = zeros(CT, 2nn, 2nn)
    ùêè‚ÇÅ‚ÇÅ = OffsetArray(view(ùêè, 1:nn, 1:nn), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)
    ùêè‚ÇÅ‚ÇÇ = OffsetArray(view(ùêè, 1:nn, (nn + 1):(2nn)), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)
    ùêè‚ÇÇ‚ÇÅ = OffsetArray(view(ùêè, (nn + 1):(2nn), 1:nn), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)
    ùêè‚ÇÇ‚ÇÇ = OffsetArray(view(ùêè, (nn + 1):(2nn), (nn + 1):(2nn)), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)

    ùêî = zeros(CT, 2nn, 2nn)
    ùêî‚ÇÅ‚ÇÅ = OffsetArray(view(ùêî, 1:nn, 1:nn), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)
    ùêî‚ÇÅ‚ÇÇ = OffsetArray(view(ùêî, 1:nn, (nn + 1):(2nn)), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)
    ùêî‚ÇÇ‚ÇÅ = OffsetArray(view(ùêî, (nn + 1):(2nn), 1:nn), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)
    ùêî‚ÇÇ‚ÇÇ = OffsetArray(view(ùêî, (nn + 1):(2nn), (nn + 1):(2nn)), n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì)

    Threads.@threads for (n, n‚Ä≤) in collect(Iterators.product(n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì, n‚Çò·µ¢‚Çô:n‚Çò‚Çê‚Çì))
        if !(sym && iseven(n + n‚Ä≤))
            PK‚ÇÅ = zerofn()
            PK‚ÇÇ = zerofn()

            UK‚ÇÅ = zerofn()
            UK‚ÇÇ = zerofn()

            for i in 1:ng
                PK‚ÇÅ += w[i] * k * r‚Ä≤[i] * ùúã[i, n] * d[i, n‚Ä≤] * œà[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤]
                PK‚ÇÇ += w[i] * k * r‚Ä≤[i] * ùúã[i, n] * d[i, n‚Ä≤] * œà‚Ä≤[i, n] * œà‚Çõ[i, n‚Ä≤]

                UK‚ÇÅ += w[i] * k * r‚Ä≤[i] * ùúã[i, n] * d[i, n‚Ä≤] * œá[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤]
                UK‚ÇÇ += w[i] * k * r‚Ä≤[i] * ùúã[i, n] * d[i, n‚Ä≤] * œá‚Ä≤[i, n] * œà‚Çõ[i, n‚Ä≤]
            end

            ùêè‚ÇÅ‚ÇÇ[n, n‚Ä≤] = A[n] * A[n‚Ä≤] * (s.m^2 - 1) / s.m * PK‚ÇÅ
            ùêè‚ÇÇ‚ÇÅ[n, n‚Ä≤] = A[n] * A[n‚Ä≤] * (1 - s.m^2) / s.m * PK‚ÇÇ

            ùêî‚ÇÅ‚ÇÇ[n, n‚Ä≤] = A[n] * A[n‚Ä≤] * (s.m^2 - 1) / s.m * UK‚ÇÅ
            ùêî‚ÇÇ‚ÇÅ[n, n‚Ä≤] = A[n] * A[n‚Ä≤] * (1 - s.m^2) / s.m * UK‚ÇÇ
        end

        if !(sym && isodd(n + n‚Ä≤))
            if n != n‚Ä≤
                PL‚ÇÅ = zerofn()
                PL‚ÇÇ = zerofn()
                PL‚Çá = zerofn()
                PL‚Çà = zerofn()

                UL‚ÇÅ = zerofn()
                UL‚ÇÇ = zerofn()
                UL‚Çá = zerofn()
                UL‚Çà = zerofn()

                for i in 1:ng
                    PL‚ÇÅ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] * œà[i, n] * œà‚Çõ[i, n‚Ä≤]
                    PL‚ÇÇ += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] * œà[i, n] * œà‚Çõ[i, n‚Ä≤]
                    PL‚Çá += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] *
                           (œà‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                            n * (n + 1) * œà[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))
                    PL‚Çà += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] *
                           (œà‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                            n‚Ä≤ * (n‚Ä≤ + 1) * œà[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))

                    UL‚ÇÅ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] * œá[i, n] * œà‚Çõ[i, n‚Ä≤]
                    UL‚ÇÇ += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] * œá[i, n] * œà‚Çõ[i, n‚Ä≤]
                    UL‚Çá += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n‚Ä≤] *
                           (œá‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                            n * (n + 1) * œá[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))
                    UL‚Çà += w[i] * k * r‚Ä≤[i] * d[i, n] * œÑ[i, n‚Ä≤] *
                           (œá‚Ä≤[i, n] * œà‚Çõ‚Ä≤[i, n‚Ä≤] +
                            n‚Ä≤ * (n‚Ä≤ + 1) * œá[i, n] * œà‚Çõ[i, n‚Ä≤] / (s.m * (k * r[i])^2))
                end

                ùêè‚ÇÅ‚ÇÅ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                             (a[n] * PL‚ÇÇ - a[n‚Ä≤] * PL‚ÇÅ)
                ùêè‚ÇÇ‚ÇÇ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                             (a[n] * PL‚Çà - a[n‚Ä≤] * PL‚Çá)

                ùêî‚ÇÅ‚ÇÅ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                             (a[n] * UL‚ÇÇ - a[n‚Ä≤] * UL‚ÇÅ)
                ùêî‚ÇÇ‚ÇÇ[n, n‚Ä≤] = 1im * A[n] * A[n‚Ä≤] * (s.m^2 - 1) / (s.m * (a[n] - a[n‚Ä≤])) *
                             (a[n] * UL‚Çà - a[n‚Ä≤] * UL‚Çá)
            else
                PLÃÉ‚ÇÅ = zerofn()
                PLÃÉ‚ÇÇ = zerofn()
                PLÃÉ‚ÇÉ = zerofn()

                ULÃÉ‚ÇÅ = zerofn()
                ULÃÉ‚ÇÇ = zerofn()
                ULÃÉ‚ÇÉ = zerofn()

                for i in 1:ng
                    PLÃÉ‚ÇÅ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                            (œà‚Ä≤[i, n] * œà‚Çõ[i, n] - s.m * œà[i, n] * œà‚Çõ‚Ä≤[i, n])
                    PLÃÉ‚ÇÇ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                            (s.m * œà‚Ä≤[i, n] * œà‚Çõ[i, n] - œà[i, n] * œà‚Çõ‚Ä≤[i, n])
                    PLÃÉ‚ÇÉ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n] * œà[i, n] * œà‚Çõ[i, n] /
                            (s.m * (k * r[i])^2)

                    ULÃÉ‚ÇÅ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                            (œá‚Ä≤[i, n] * œà‚Çõ[i, n] - s.m * œá[i, n] * œà‚Çõ‚Ä≤[i, n])
                    ULÃÉ‚ÇÇ += w[i] * (ùúã[i, n]^2 + œÑ[i, n]^2) *
                            (s.m * œá‚Ä≤[i, n] * œà‚Çõ[i, n] - œá[i, n] * œà‚Çõ‚Ä≤[i, n])
                    ULÃÉ‚ÇÉ += w[i] * k * r‚Ä≤[i] * œÑ[i, n] * d[i, n] * œá[i, n] * œà‚Çõ[i, n] /
                            (s.m * (k * r[i])^2)
                end

                ùêè‚ÇÅ‚ÇÅ[n, n] = -1im / s.m * A[n]^2 * PLÃÉ‚ÇÅ
                ùêè‚ÇÇ‚ÇÇ[n, n] = -1im / s.m * A[n]^2 * (PLÃÉ‚ÇÇ + (s.m^2 - 1) * a[n] * PLÃÉ‚ÇÉ)

                ùêî‚ÇÅ‚ÇÅ[n, n] = -1im / s.m * A[n]^2 * ULÃÉ‚ÇÅ
                ùêî‚ÇÇ‚ÇÇ[n, n] = -1im / s.m * A[n]^2 * (ULÃÉ‚ÇÇ + (s.m^2 - 1) * a[n] * ULÃÉ‚ÇÉ)
            end
        end
    end

    ùêì = ùêì_from_ùêè_and_ùêî(ùêè, ùêî)

    return ùêì
end

@testitem "transition_matrix_m should be equivalent to transition_matrix_m‚ÇÄ when m = 0" begin
    using TransitionMatrices: Spheroid, Chebyshev, transition_matrix_m, transition_matrix_m‚ÇÄ

    @testset "Spheroid" begin
        params = Iterators.product((1.0, 2.0, 5.0), (0.9, 1.8, 4.5), (1.311, 1.5 + 0.01im))
        n‚Çò‚Çê‚Çì = 10
        Ng = 200
        Œª = 2œÄ
        @testset "a = $a, c = $c, m = $m" for (a, c, m) in params
            s = Spheroid{Float64, ComplexF64}(a, c, m)
            ùêì = transition_matrix_m(0, s, Œª, n‚Çò‚Çê‚Çì, Ng)
            ùêì‚ÇÄ = transition_matrix_m‚ÇÄ(s, Œª, n‚Çò‚Çê‚Çì, Ng)
            @test all(ùêì .‚âà ùêì‚ÇÄ)
        end
    end

    @testset "Cylinder" begin
        params = Iterators.product((1.0, 2.0), (0.5, 2.0), (1.311, 1.5 + 0.01im))
        n‚Çò‚Çê‚Çì = 10
        Ng = 200
        Œª = 2œÄ
        @testset "r = $r, h = $h, m = $m" for (r, h, m) in params
            c = Cylinder{Float64, ComplexF64}(r, h, m)
            ùêì = transition_matrix_m(0, c, Œª, n‚Çò‚Çê‚Çì, Ng)
            ùêì‚ÇÄ = transition_matrix_m‚ÇÄ(c, Œª, n‚Çò‚Çê‚Çì, Ng)
            @test all(ùêì .‚âà ùêì‚ÇÄ)
        end
    end

    @testset "Chebyshev" begin
        params = Iterators.product((0.5, 1.0, 5.0), (-0.5, 0.1, 0.9), (2, 3, 8),
                                   (1.311, 1.5 + 0.01im))
        n‚Çò‚Çê‚Çì = 10
        Ng = 200
        Œª = 2œÄ
        @testset "r‚ÇÄ = $r‚ÇÄ, Œµ = $Œµ, n = $n, m = $m" for (r‚ÇÄ, Œµ, n, m) in params
            c = Chebyshev{Float64, ComplexF64}(r‚ÇÄ, Œµ, n, m)
            ùêì = transition_matrix_m(0, c, Œª, n‚Çò‚Çê‚Çì, Ng)
            ùêì‚ÇÄ = transition_matrix_m‚ÇÄ(c, Œª, n‚Çò‚Çê‚Çì, Ng)
            @test all(ùêì .‚âà ùêì‚ÇÄ)
        end
    end
end

@doc raw"""
```
scattering_cross_section(axi::AxisymmetricTransitionMatrix{CT, N}, Œª=2œÄ) where {CT, N}
```

Calculate the scattering cross section per particle averaged over the uniform orientation distribution, according to Eq. (5.141) in Mishchenko et al. (2002).

```math
\left\langle C_{\text {sca }}\right\rangle=\frac{2 \pi}{k_1^2} \sum_{n=1}^{\infty} \sum_{n^{\prime}=1}^{\infty} \sum_{m=0}^{\min \left(n, n^{\prime}\right)} \sum_{k=1}^2 \sum_{l=1}^2\left(2-\delta_{m 0}\right)\left|T_{m n m n^{\prime}}^{k l}(P)\right|^2
```

Parameters:

- `ùêì`: the T-Matrix of the scatterer.
- `Œª`: the wavelength of the incident wave in the host medium. Default to 2œÄ.
"""
function scattering_cross_section(ùêì::AxisymmetricTransitionMatrix{CT, N, V, T},
                                  Œª = 2œÄ) where {CT, N, V, T}
    CÀ¢·∂ú·µÉ = zero(T)
    for m in 0:N
        for p‚Ä≤ in 1:2, p in 1:2
            for n‚Ä≤ in max(m, 1):N, n in max(m, 1):N
                if m == 0
                    CÀ¢·∂ú·µÉ += abs2(ùêì[m, n, m, n‚Ä≤, p, p‚Ä≤])
                else
                    CÀ¢·∂ú·µÉ += 2 * abs2(ùêì[m, n, m, n‚Ä≤, p, p‚Ä≤])
                end
            end
        end
    end

    CÀ¢·∂ú·µÉ * Œª^2 / 2œÄ
end

@testitem "scattering cross section should be the same when calculating for axisymmetric scatterers using the general method" begin
    using TransitionMatrices: Spheroid, TransitionMatrix, transition_matrix,
                              scattering_cross_section

    s = Spheroid(1.0, 0.5, 1.5 + 0.01im)
    ùêì = transition_matrix(s, 2œÄ, 5, 40)
    CÀ¢·∂ú·µÉ = scattering_cross_section(ùêì)
    CÀ¢·∂ú·µÉ‚Ä≤ = scattering_cross_section(TransitionMatrix{ComplexF64, 5, typeof(ùêì)}(ùêì))
    @test CÀ¢·∂ú·µÉ ‚âà CÀ¢·∂ú·µÉ‚Ä≤
end

@doc raw"""
```
extinction_cross_section(axi::AxisymmetricTransitionMatrix{CT, N}, Œª=2œÄ) where {CT, N}
```

Calculate the extinction cross section per particle averaged over the uniform orientation distribution, according to Eq. (5.107) in Mishchenko et al. (2002).

```math
\left\langle C_{\text {ext }}\right\rangle=-\frac{2 \pi}{k_1^2} \operatorname{Re} \sum_{n=1}^{\infty} \sum_{m=0}^n\left(2-\delta_{m 0}\right)\left[T_{m n m n}^{11}(P)+T_{m n m n}^{22}(P)\right]
```

Parameters:

- `ùêì`: the T-Matrix of the scatterer.
- `Œª`: the wavelength of the incident wave in the host medium. Default to 2œÄ.
"""
function extinction_cross_section(ùêì::AxisymmetricTransitionMatrix{CT, N, V, T},
                                  Œª = 2œÄ) where {CT, N, V, T}
    C·µâÀ£·µó = zero(CT)
    for m in 0:N
        coeff = m == 0 ? 1 : 2
        for n in max(m, 1):N
            C·µâÀ£·µó += coeff * (ùêì[m, n, m, n, 1, 1] + ùêì[m, n, m, n, 2, 2])
        end
    end

    -real(C·µâÀ£·µó) * Œª^2 / 2œÄ
end

@testitem "extinction cross section should be the same when calculating for axisymmetric scatterers using the general method" begin
    using TransitionMatrices: Spheroid, TransitionMatrix, transition_matrix,
                              extinction_cross_section

    s = Spheroid(1.0, 0.5, 1.5 + 0.01im)
    ùêì = transition_matrix(s, 2œÄ, 5, 40)
    C·µâÀ£·µó = extinction_cross_section(ùêì)
    C·µâÀ£·µó‚Ä≤ = extinction_cross_section(TransitionMatrix{ComplexF64, 5, typeof(ùêì)}(ùêì))
    @test C·µâÀ£·µó ‚âà C·µâÀ£·µó‚Ä≤
end

function extinction_efficiency_m‚ÇÄ(T‚ÇÄ)
    n‚Çò‚Çê‚Çì = size(T‚ÇÄ, 1) √∑ 2
    Q·µâÀ£·µó = sum((2n + 1) * real(T‚ÇÄ[n, n] + T‚ÇÄ[n + n‚Çò‚Çê‚Çì, n + n‚Çò‚Çê‚Çì]) for n in 1:n‚Çò‚Çê‚Çì)
    return Q·µâÀ£·µó
end

function scattering_efficiency_m‚ÇÄ(T‚ÇÄ)
    n‚Çò‚Çê‚Çì = size(T‚ÇÄ, 1) √∑ 2
    QÀ¢·∂ú·µÉ = sum((2n + 1) *
               real(T‚ÇÄ[n, n] * T‚ÇÄ[n, n]' + T‚ÇÄ[n + n‚Çò‚Çê‚Çì, n + n‚Çò‚Çê‚Çì] * T‚ÇÄ[n + n‚Çò‚Çê‚Çì, n + n‚Çò‚Çê‚Çì]')
               for n in 1:n‚Çò‚Çê‚Çì)
    return QÀ¢·∂ú·µÉ
end

@doc raw"""
```
expansion_coefficients(ùêì, Œª)
```

Calculate the expansion coefficients from a given T-Matrix.

Parameters:

- `ùêì`: The precalculated T-Matrix of a scatterer.
- `Œª`: The wavelength.
"""
function expansion_coefficients(ùêì::AxisymmetricTransitionMatrix{CT, N, V, T},
                                Œª) where {CT, N, V, T}
    CÀ¢·∂ú·µÉ = Float64(scattering_cross_section(ùêì, Œª))
    Œª = Float64(Œª)

    ci = OffsetArray([(1.0im)^(i % 4) for i in (-N):N], (-N):N)
    s = OffsetArray([Float64(2i + 1) for i in 0:(2N)], 0:(2N))
    ss = sqrt.(s)
    sig = OffsetArray([1 - 2 * (i % 2) for i in 0:(4N)], 0:(4N))

    T1 = OffsetArray(zeros(ComplexF64, 2N + 1, N), (-N):N, 1:N)
    T2 = OffsetArray(zeros(ComplexF64, 2N + 1, N), (-N):N, 1:N)
    A1 = zeros(ComplexF64, N)
    A2 = zeros(ComplexF64, N)
    B1 = OffsetArray(zeros(ComplexF64, 2N + 1, 2N + 1, N), 0:(2N), (-N):N, 1:N)
    B2 = OffsetArray(zeros(ComplexF64, 2N + 1, 2N + 1, N), 0:(2N), (-N):N, 1:N)

    wig_table_init(4N, 3)
    wig_temp_init(4N)

    for n in 1:N
        # Calculate T1 and T2
        for n‚Ä≤ in 1:N
            for m in 0:min(n, n‚Ä≤)
                T11 = ùêì[m, n, m, n‚Ä≤, 1, 1]
                T12 = ùêì[m, n, m, n‚Ä≤, 1, 2]
                T21 = ùêì[m, n, m, n‚Ä≤, 2, 1]
                T22 = ùêì[m, n, m, n‚Ä≤, 2, 2]
                T1[m, n‚Ä≤] = T11 + T12 + T21 + T22
                T2[m, n‚Ä≤] = T11 + T12 - T21 - T22

                if m != 0
                    T1[-m, n‚Ä≤] = T11 - T12 - T21 + T22
                    T2[-m, n‚Ä≤] = T11 - T12 + T21 - T22
                end
            end
        end

        for n‚ÇÅ in 0:(N + n)
            # Calculate A1 and A2
            for n‚Ä≤ in max(1, abs(n - n‚ÇÅ)):min(N, n‚ÇÅ + n)
                A1[n‚Ä≤] = complex(0.0)
                A2[n‚Ä≤] = complex(0.0)
                for m‚ÇÅ in (-min(n, n‚Ä≤)):min(n, n‚Ä≤)
                    cg = clebschgordan(n, m‚ÇÅ, n‚ÇÅ, 0, n‚Ä≤)
                    A1[n‚Ä≤] += cg * T1[m‚ÇÅ, n‚Ä≤]
                    A2[n‚Ä≤] += cg * T2[m‚ÇÅ, n‚Ä≤]
                end
                A1[n‚Ä≤] *= ci[n‚Ä≤ - n] / ss[n‚Ä≤]
                A2[n‚Ä≤] *= ci[n‚Ä≤ - n] / ss[n‚Ä≤]
            end

            # Calculate B1 and B2
            for m in max(1 - n‚ÇÅ, -n):min(n‚ÇÅ + 1, n)
                for n‚Ä≤ in max(1, abs(n - n‚ÇÅ)):min(N, n‚ÇÅ + n)
                    cg = clebschgordan(n, m, n‚ÇÅ, 1 - m, n‚Ä≤)
                    B1[n‚ÇÅ, m, n] += cg * A1[n‚Ä≤]
                    B2[n‚ÇÅ, m, n] += cg * A2[n‚Ä≤]
                end
            end
        end
    end

    # Calculate D
    D‚ÇÄ‚ÇÄ = OffsetArray(zeros(2N + 1, N, N), (-N):N, 1:N, 1:N)
    D‚ÇÄ‚Çã‚ÇÄ = OffsetArray(zeros(2N + 1, N, N), (-N):N, 1:N, 1:N)
    D‚ÇÇ‚ÇÇ = OffsetArray(zeros(2N + 1, N, N), (-N):N, 1:N, 1:N)
    D‚ÇÇ‚Çã‚ÇÇ = OffsetArray(zeros(2N + 1, N, N), (-N):N, 1:N, 1:N)
    D‚ÇÄ‚ÇÇ = OffsetArray(zeros(ComplexF64, 2N + 1, N, N), (-N):N, 1:N, 1:N)

    for n in 1:N
        for n‚Ä≤ in 1:N
            for m in (-min(n, n‚Ä≤)):min(n, n‚Ä≤)
                for n‚ÇÅ in abs(m - 1):(min(n, n‚Ä≤) + N)
                    D‚ÇÄ‚ÇÄ[m, n‚Ä≤, n] += s[n‚ÇÅ] * real(B1[n‚ÇÅ, m, n] * B1[n‚ÇÅ, m, n‚Ä≤]')
                    D‚ÇÄ‚Çã‚ÇÄ[m, n‚Ä≤, n] += s[n‚ÇÅ] * real(B2[n‚ÇÅ, m, n] * B2[n‚ÇÅ, m, n‚Ä≤]')
                end
            end

            for m in max(-n, -n‚Ä≤ + 2):min(n, n‚Ä≤ + 2)
                for n‚ÇÅ in abs(m - 1):(min(n, n‚Ä≤) + N)
                    D‚ÇÇ‚ÇÇ[m, n‚Ä≤, n] += s[n‚ÇÅ] * real(B1[n‚ÇÅ, m, n] * B1[n‚ÇÅ, 2 - m, n‚Ä≤]')
                    D‚ÇÇ‚Çã‚ÇÇ[m, n‚Ä≤, n] += s[n‚ÇÅ] * real(B2[n‚ÇÅ, m, n] * B2[n‚ÇÅ, 2 - m, n‚Ä≤]')
                    D‚ÇÄ‚ÇÇ[m, n‚Ä≤, n] += s[n‚ÇÅ] * B2[n‚ÇÅ, m, n] * B1[n‚ÇÅ, 2 - m, n‚Ä≤]'
                end
            end
        end
    end

    h_const = Œª^2 / (CÀ¢·∂ú·µÉ * 4 * œÄ)
    h = OffsetArray([s[l] * h_const * ss[n] / ss[n‚Ä≤]
                     for l in 0:(2N), n in 1:N, n‚Ä≤ in 1:N],
                    0:(2N),
                    1:N,
                    1:N)

    # Calculate g
    g‚ÇÄ‚ÇÄ = OffsetArray(zeros(2N + 1), 0:(2N))
    g‚ÇÄ‚Çã‚ÇÄ = OffsetArray(zeros(2N + 1), 0:(2N))
    g‚ÇÇ‚ÇÇ = OffsetArray(zeros(2N + 1), 0:(2N))
    g‚ÇÇ‚Çã‚ÇÇ = OffsetArray(zeros(2N + 1), 0:(2N))
    g‚ÇÄ‚ÇÇ = OffsetArray(zeros(ComplexF64, 2N + 1), 0:(2N))

    for l in 0:(2N)
        for n in 1:N
            for n‚Ä≤ in max(1, abs(n - l)):min(N, n + l)
                cg1 = clebschgordan(n, 1, l, 0, n‚Ä≤)
                sm‚ÇÄ‚ÇÄ = 0.0
                sm‚ÇÄ‚Çã‚ÇÄ = 0.0
                for m in (-min(n, n‚Ä≤)):min(n, n‚Ä≤)
                    cg = clebschgordan(n, m, l, 0, n‚Ä≤)
                    sm‚ÇÄ‚ÇÄ += cg * D‚ÇÄ‚ÇÄ[m, n‚Ä≤, n]
                    sm‚ÇÄ‚Çã‚ÇÄ += cg * D‚ÇÄ‚Çã‚ÇÄ[m, n‚Ä≤, n]
                end
                g‚ÇÄ‚ÇÄ[l] += h[l, n, n‚Ä≤] * cg1 * sm‚ÇÄ‚ÇÄ
                g‚ÇÄ‚Çã‚ÇÄ[l] += h[l, n, n‚Ä≤] * cg1 * sig[n + n‚Ä≤ + l] * sm‚ÇÄ‚Çã‚ÇÄ

                if l >= 2
                    cg2 = clebschgordan(n, -1, l, 2, n‚Ä≤)
                    sm‚ÇÇ‚ÇÇ = 0.0
                    sm‚ÇÇ‚Çã‚ÇÇ = 0.0
                    sm‚ÇÄ‚ÇÇ = complex(0.0)
                    for m in max(-n, -n‚Ä≤ + 2):min(n, n‚Ä≤ + 2)
                        cg = clebschgordan(n, -m, l, 2, n‚Ä≤)
                        sm‚ÇÇ‚ÇÇ += cg * D‚ÇÇ‚ÇÇ[m, n‚Ä≤, n]
                        sm‚ÇÇ‚Çã‚ÇÇ += cg * D‚ÇÇ‚Çã‚ÇÇ[m, n‚Ä≤, n]
                        sm‚ÇÄ‚ÇÇ += cg * D‚ÇÄ‚ÇÇ[m, n‚Ä≤, n]
                    end
                    g‚ÇÇ‚ÇÇ[l] += h[l, n, n‚Ä≤] * cg2 * sm‚ÇÇ‚ÇÇ
                    g‚ÇÇ‚Çã‚ÇÇ[l] += h[l, n, n‚Ä≤] * cg2 * sig[n + n‚Ä≤ + l] * sm‚ÇÇ‚Çã‚ÇÇ
                    g‚ÇÄ‚ÇÇ[l] += -h[l, n, n‚Ä≤] * cg1 * sm‚ÇÄ‚ÇÇ
                end
            end
        end
    end

    Œ±‚ÇÅ = g‚ÇÄ‚ÇÄ + g‚ÇÄ‚Çã‚ÇÄ
    Œ±‚ÇÇ = g‚ÇÇ‚ÇÇ + g‚ÇÇ‚Çã‚ÇÇ
    Œ±‚ÇÉ = g‚ÇÇ‚ÇÇ - g‚ÇÇ‚Çã‚ÇÇ
    Œ±‚ÇÑ = g‚ÇÄ‚ÇÄ - g‚ÇÄ‚Çã‚ÇÄ
    Œ≤‚ÇÅ = 2real.(g‚ÇÄ‚ÇÇ)
    Œ≤‚ÇÇ = 2imag.(g‚ÇÄ‚ÇÇ)

    wig_temp_free()
    wig_table_free()

    return Œ±‚ÇÅ, Œ±‚ÇÇ, Œ±‚ÇÉ, Œ±‚ÇÑ, Œ≤‚ÇÅ, Œ≤‚ÇÇ
end

@doc raw"""
```
scattering_matrix(Œ±‚ÇÅ, Œ±‚ÇÇ, Œ±‚ÇÉ, Œ±‚ÇÑ, Œ≤‚ÇÅ, Œ≤‚ÇÇ, Œ∏s)
```

Calculate the scatterering matrix elements from the given expansion coefficients.

Parameters:

- `Œ±‚ÇÅ`, `Œ±‚ÇÇ`, `Œ±‚ÇÉ`, `Œ±‚ÇÑ`, `Œ≤‚ÇÅ`, `Œ≤‚ÇÇ`: The precalculated expansion coefficients.
- `Œ∏s`: The scattering angles to be evaluated in degrees.
"""
function scattering_matrix(Œ±‚ÇÅ, Œ±‚ÇÇ, Œ±‚ÇÉ, Œ±‚ÇÑ, Œ≤‚ÇÅ, Œ≤‚ÇÇ, Œ∏s::AbstractVector)
    lmax = length(Œ±‚ÇÅ) - 1
    Œ∏s = deg2rad.(Œ∏s)
    NŒ∏ = length(Œ∏s)

    F = zeros(NŒ∏, 6)
    Threads.@threads for i in eachindex(Œ∏s)
        Œ∏ = Œ∏s[i]
        d‚ÇÄ‚ÇÄ = wigner_d_recursion(0, 0, lmax, Œ∏)
        d‚ÇÇ‚ÇÇ = wigner_d_recursion(2, 2, lmax, Œ∏)
        d‚ÇÇ‚Çã‚ÇÇ = wigner_d_recursion(2, -2, lmax, Œ∏)
        d‚ÇÄ‚ÇÇ = wigner_d_recursion(0, 2, lmax, Œ∏)

        F‚ÇÅ‚ÇÅ = sum(Œ±‚ÇÅ[l] * d‚ÇÄ‚ÇÄ[l] for l in 0:lmax)
        F‚ÇÇ‚ÇÇ‚Çä‚ÇÉ‚ÇÉ = sum((Œ±‚ÇÇ[l] + Œ±‚ÇÉ[l]) * d‚ÇÇ‚ÇÇ[l] for l in 2:lmax)
        F‚ÇÇ‚ÇÇ‚Çã‚ÇÉ‚ÇÉ = sum((Œ±‚ÇÇ[l] - Œ±‚ÇÉ[l]) * d‚ÇÇ‚Çã‚ÇÇ[l] for l in 2:lmax)
        F‚ÇÇ‚ÇÇ = (F‚ÇÇ‚ÇÇ‚Çä‚ÇÉ‚ÇÉ + F‚ÇÇ‚ÇÇ‚Çã‚ÇÉ‚ÇÉ) / 2
        F‚ÇÉ‚ÇÉ = F‚ÇÇ‚ÇÇ‚Çä‚ÇÉ‚ÇÉ - F‚ÇÇ‚ÇÇ
        F‚ÇÑ‚ÇÑ = sum(Œ±‚ÇÑ[l] * d‚ÇÄ‚ÇÄ[l] for l in 0:lmax)
        F‚ÇÅ‚ÇÇ = -sum(Œ≤‚ÇÅ[l] * d‚ÇÄ‚ÇÇ[l] for l in 2:lmax)
        F‚ÇÉ‚ÇÑ = -sum(Œ≤‚ÇÇ[l] * d‚ÇÄ‚ÇÇ[l] for l in 2:lmax)

        F[i, :] .= F‚ÇÅ‚ÇÅ, F‚ÇÅ‚ÇÇ, F‚ÇÇ‚ÇÇ, F‚ÇÉ‚ÇÉ, F‚ÇÉ‚ÇÑ, F‚ÇÑ‚ÇÑ
    end

    return F
end

@doc raw"""
```
scattering_matrix(ùêì, Œª, Œ∏s)
```

Calculate expansion coefficients first and then calculate scatterering matrix elements.

Parameters:

- `ùêì`: The transition matrix.
- `Œª`: The wavelength.
- `Œ∏s`: The scattering angles to be evaluated in degrees.
"""
function scattering_matrix(ùêì::AxisymmetricTransitionMatrix, Œª, Œ∏s::AbstractVector)
    Œ±‚ÇÅ, Œ±‚ÇÇ, Œ±‚ÇÉ, Œ±‚ÇÑ, Œ≤‚ÇÅ, Œ≤‚ÇÇ = expansion_coefficients(ùêì, Œª)
    return scattering_matrix(Œ±‚ÇÅ, Œ±‚ÇÇ, Œ±‚ÇÉ, Œ±‚ÇÑ, Œ≤‚ÇÅ, Œ≤‚ÇÇ, Œ∏s)
end

@testitem "Can calculate scattering matrix" begin
    s = Spheroid(1.0, 2.0, complex(1.311))
    Œª = 2œÄ
    ùêì = transition_matrix(s, Œª)
    Œ∏s = collect(0:180)
    F = scattering_matrix(ùêì, Œª, Œ∏s)

    @test size(F) == (181, 6)
end
